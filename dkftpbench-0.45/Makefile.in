# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am

# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

# To turn Makefile.am into Makefile from scratch, run 
# 'aclocal; autoconf; automake --add-missing; ./configure'
# See 'info automake' or http://sourceware.cygnus.com/automake/
# and 'info autoconf'
#
# To run the unit tests, do 'make check'.

#----------------------------------------------------------------------
# List everything we build; break list into three kinds of executables

# Unattended unit tests


SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = .

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
CC = @CC@
CXX = @CXX@
MAKEINFO = @MAKEINFO@
PACKAGE = @PACKAGE@
RANLIB = @RANLIB@
VERSION = @VERSION@

TESTS = \
	ftp_client_proto_test \
	nbbio_test \
	Poller_test \
	Sked_test


# Following tests are not yet unattended
HAND_TESTS = \
	robouser_test \
	ftp_client_pipe_test


# Real programs 
bin_PROGRAMS = dkftpbench

noinst_PROGRAMS = $(TESTS) $(HAND_TESTS) dklimits Poller_bench profile

lib_LIBRARIES = libPoller.a
pkginclude_HEADERS = \
	Poller.h \
	Poller_devpoll.h \
	Poller_poll.h \
	Poller_select.h \
	Poller_sigio.h \
	Poller_sigfd.h \
	Poller_kqueue.h


# No info yet
info_TEXINFOS = 

EXTRA_DIST = \
	inet_aton.c \
	bakeoff.html \
	Poller_bench.sh \
	Poller_bench.html \
	callbackDemo.html \
	classes.html \
	index.html \
	nonblocking.html \
	results.html \
	theory.html \
	one-include.patch \
	omni_scripts.tar.gz \
	config/ac_cxx_namespaces.m4 \
	config/CORBA_CHECK_SYMBOL.m4 \
	config/RSSH_CHECK_MODCBROKER.m4 \
	config/RSSH_CHECK_OMNIORB.m4 \
	config/RSSH_CHECK_ORBACUS.m4 \
	config/RSSH_CHECK_ORBEXPRESS.m4 \
	config/RSSH_CHECK_ORBIT.m4 \
	config/RSSH_CHECK_ORBIT.m4.orig \
	config/RSSH_CHECK_ORBIXE.m4 \
	config/RSSH_CHECK_ORB.m4 \
	config/RSSH_CHECK_OTS.m4 \
	config/RSSH_CHECK_PTHREADS.m4 \
	config/RSSH_CHECK_SUNPRO_CC.m4 \
	config/RSSH_CHECK_SUNPRO_C.m4 \
	config/RSSH_CHECK_TAO.m4 \
	config/RSSH_ENABLE_PTHREADS.m4 \
	config/RSSH_PIC_FLAG.m4 \
	config/RSSH_PROG_CXXAR.m4 \
	config/RSSH_PROG_CXXLD.m4 \
	config/RSSH_RTTI.m4 \
	config/RSSH_TRY_RTTI_NOCACHE.m4 \
	config/YAD_CHECK_INCLUDE_LIB.m4 \
	config/config.guess \
	config/config.sub \
	config/install-sh \
	config/missing \
	config/mkinstalldirs \
	CorbaPlatoon.idl \
	CorbaPlatoon_impl.cc \
	CorbaPlatoon_test.cc \
	corbaftpbench.cc


#----------------------------------------------------------------------
# For each thing we build, list its sources, and anything special about
# how to build it

libPoller_a_SOURCES = \
	Poller.h \
	Poller_sigfd.cc \
	Poller_sigio.cc \
	Poller_poll.cc \
	Poller_select.cc \
	Poller_devpoll.cc \
	Poller_kqueue.cc \
	Poller.cc


dkftpbench_SOURCES = \
	CHECK.h \
	Poller.h \
	Sked.h \
	dprint.h \
	eclock.h \
	ftp_client_pipe.h \
	ftp_client_proto.h \
	getifaddrs.h \
	getifaddrs.c \
	nbbio.h \
	robouser.h \
	Platoon.h \
	bench.cc \
	dprint.cc \
	eclock.cc \
	ftp_client_pipe.cc \
	ftp_client_proto.cc \
	nbbio.cc \
	robouser.cc \
	Platoon.cc \
	CHECK.cc \
	Poller_sigfd.cc \
	Poller_sigio.cc \
	Poller_poll.cc \
	Poller_select.cc \
	Poller_devpoll.cc \
	Poller_kqueue.cc \
	Poller.cc \
	Sked.cc


dklimits_SOURCES = \
	dklimits.c


ftp_client_proto_test_SOURCES = \
	dprint.cc \
	ftp_client_proto.cc \
	ftp_client_proto_test.cc


ftp_client_pipe_test_SOURCES = \
	dprint.cc \
	eclock.cc \
	ftp_client_pipe.cc \
	ftp_client_pipe_test.cc \
	ftp_client_proto.cc \
	Poller_poll.cc \
	Poller.cc \
	nbbio.cc \
	Sked.cc


nbbio_test_SOURCES = \
	dprint.cc \
	nbbio.cc \
	nbbio_test.cc


robouser_test_SOURCES = \
	dprint.cc \
	eclock.cc \
	ftp_client_pipe.cc \
	ftp_client_proto.cc \
	nbbio.cc \
	robouser.cc \
	Platoon.cc \
	robouser_test.cc \
	CHECK.cc \
	Poller_poll.cc \
	Poller.cc \
	Sked.cc


Poller_bench_SOURCES = \
	dprint.cc \
	eclock.cc \
	CHECK.cc \
	Poller.h \
	Poller.cc \
	Poller_devpoll.cc \
	Poller_devpoll.h \
	Poller_poll.h \
	Poller_poll.cc \
	Poller_bench.cc \
	Poller_select.h \
	Poller_select.cc \
	Poller_sigio.h \
	Poller_sigio.cc \
	Poller_sigfd.h \
	Poller_sigfd.cc \
	Poller_kqueue.h \
	Poller_kqueue.cc


Poller_test_SOURCES = \
	dprint.cc \
	CHECK.cc \
	eclock.cc \
	Poller.h \
	Poller.cc \
	Poller_sigfd.cc \
	Poller_sigfd.h \
	Poller_sigio.cc \
	Poller_sigio.h \
	Poller_devpoll.cc \
	Poller_devpoll.h \
	Poller_poll.h \
	Poller_poll.cc \
	Poller_test.cc \
	Poller_select.h \
	Poller_select.cc \
	Poller_kqueue.h \
	Poller_kqueue.cc


Sked_test_SOURCES = \
	dprint.cc \
	eclock.cc \
	Sked.cc \
	Sked_test.cc


#---- end of corba --------------------------------------------------------

#--------------------------------------------------------------------------
# Program to do fine-grained profiling of Linux kernel.  From the net...

profile_SOURCES = profile.c
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_CLEAN_FILES = 
LIBRARIES =  $(lib_LIBRARIES)


DEFS = @DEFS@ -I. -I$(srcdir) 
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
libPoller_a_LIBADD = 
libPoller_a_OBJECTS =  Poller_sigfd.o Poller_sigio.o Poller_poll.o \
Poller_select.o Poller_devpoll.o Poller_kqueue.o Poller.o
AR = ar
PROGRAMS =  $(bin_PROGRAMS) $(noinst_PROGRAMS)

dkftpbench_OBJECTS =  getifaddrs.o bench.o dprint.o eclock.o \
ftp_client_pipe.o ftp_client_proto.o nbbio.o robouser.o Platoon.o \
CHECK.o Poller_sigfd.o Poller_sigio.o Poller_poll.o Poller_select.o \
Poller_devpoll.o Poller_kqueue.o Poller.o Sked.o
dkftpbench_LDADD = $(LDADD)
dkftpbench_DEPENDENCIES = 
dkftpbench_LDFLAGS = 
ftp_client_proto_test_OBJECTS =  dprint.o ftp_client_proto.o \
ftp_client_proto_test.o
ftp_client_proto_test_LDADD = $(LDADD)
ftp_client_proto_test_DEPENDENCIES = 
ftp_client_proto_test_LDFLAGS = 
nbbio_test_OBJECTS =  dprint.o nbbio.o nbbio_test.o
nbbio_test_LDADD = $(LDADD)
nbbio_test_DEPENDENCIES = 
nbbio_test_LDFLAGS = 
Poller_test_OBJECTS =  dprint.o CHECK.o eclock.o Poller.o Poller_sigfd.o \
Poller_sigio.o Poller_devpoll.o Poller_poll.o Poller_test.o \
Poller_select.o Poller_kqueue.o
Poller_test_LDADD = $(LDADD)
Poller_test_DEPENDENCIES = 
Poller_test_LDFLAGS = 
Sked_test_OBJECTS =  dprint.o eclock.o Sked.o Sked_test.o
Sked_test_LDADD = $(LDADD)
Sked_test_DEPENDENCIES = 
Sked_test_LDFLAGS = 
robouser_test_OBJECTS =  dprint.o eclock.o ftp_client_pipe.o \
ftp_client_proto.o nbbio.o robouser.o Platoon.o robouser_test.o CHECK.o \
Poller_poll.o Poller.o Sked.o
robouser_test_LDADD = $(LDADD)
robouser_test_DEPENDENCIES = 
robouser_test_LDFLAGS = 
ftp_client_pipe_test_OBJECTS =  dprint.o eclock.o ftp_client_pipe.o \
ftp_client_pipe_test.o ftp_client_proto.o Poller_poll.o Poller.o \
nbbio.o Sked.o
ftp_client_pipe_test_LDADD = $(LDADD)
ftp_client_pipe_test_DEPENDENCIES = 
ftp_client_pipe_test_LDFLAGS = 
dklimits_OBJECTS =  dklimits.o
dklimits_LDADD = $(LDADD)
dklimits_DEPENDENCIES = 
dklimits_LDFLAGS = 
Poller_bench_OBJECTS =  dprint.o eclock.o CHECK.o Poller.o \
Poller_devpoll.o Poller_poll.o Poller_bench.o Poller_select.o \
Poller_sigio.o Poller_sigfd.o Poller_kqueue.o
Poller_bench_LDADD = $(LDADD)
Poller_bench_DEPENDENCIES = 
Poller_bench_LDFLAGS = 
profile_OBJECTS =  profile.o
profile_LDADD = $(LDADD)
profile_DEPENDENCIES = 
profile_LDFLAGS = 
CXXFLAGS = @CXXFLAGS@
CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@
TEXI2DVI = texi2dvi
TEXINFO_TEX = $(top_srcdir)/config/texinfo.tex
INFO_DEPS = 
DVIS = 
TEXINFOS = 
HEADERS =  $(pkginclude_HEADERS)

DIST_COMMON =  README AUTHORS COPYING ChangeLog INSTALL Makefile.am \
Makefile.in NEWS acinclude.m4 aclocal.m4 configure configure.in \
texinfo.tex


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = gtar
GZIP_ENV = --best
SOURCES = $(libPoller_a_SOURCES) $(dkftpbench_SOURCES) $(ftp_client_proto_test_SOURCES) $(nbbio_test_SOURCES) $(Poller_test_SOURCES) $(Sked_test_SOURCES) $(robouser_test_SOURCES) $(ftp_client_pipe_test_SOURCES) $(dklimits_SOURCES) $(Poller_bench_SOURCES) $(profile_SOURCES)
OBJECTS = $(libPoller_a_OBJECTS) $(dkftpbench_OBJECTS) $(ftp_client_proto_test_OBJECTS) $(nbbio_test_OBJECTS) $(Poller_test_OBJECTS) $(Sked_test_OBJECTS) $(robouser_test_OBJECTS) $(ftp_client_pipe_test_OBJECTS) $(dklimits_OBJECTS) $(Poller_bench_OBJECTS) $(profile_OBJECTS)

all: all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .cc .dvi .info .o .ps .s .texi .texinfo .txi
$(srcdir)/Makefile.in: Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOMAKE) --gnu --include-deps Makefile

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

$(ACLOCAL_M4):  configure.in  acinclude.m4
	cd $(srcdir) && $(ACLOCAL)

config.status: $(srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck
$(srcdir)/configure: $(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)
	cd $(srcdir) && $(AUTOCONF)

mostlyclean-libLIBRARIES:

clean-libLIBRARIES:
	-test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)

distclean-libLIBRARIES:

maintainer-clean-libLIBRARIES:

install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libdir)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_DATA) $$p $(DESTDIR)$(libdir)/$$p"; \
	    $(INSTALL_DATA) $$p $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(RANLIB) $(DESTDIR)$(libdir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	list='$(lib_LIBRARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(libdir)/$$p; \
	done

.c.o:
	$(COMPILE) -c $<

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

libPoller.a: $(libPoller_a_OBJECTS) $(libPoller_a_DEPENDENCIES)
	-rm -f libPoller.a
	$(AR) cru libPoller.a $(libPoller_a_OBJECTS) $(libPoller_a_LIBADD)
	$(RANLIB) libPoller.a

mostlyclean-binPROGRAMS:

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

distclean-binPROGRAMS:

maintainer-clean-binPROGRAMS:

install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo "  $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`"; \
	     $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	list='$(bin_PROGRAMS)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
	done

mostlyclean-noinstPROGRAMS:

clean-noinstPROGRAMS:
	-test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)

distclean-noinstPROGRAMS:

maintainer-clean-noinstPROGRAMS:

dkftpbench: $(dkftpbench_OBJECTS) $(dkftpbench_DEPENDENCIES)
	@rm -f dkftpbench
	$(CXXLINK) $(dkftpbench_LDFLAGS) $(dkftpbench_OBJECTS) $(dkftpbench_LDADD) $(LIBS)

ftp_client_proto_test: $(ftp_client_proto_test_OBJECTS) $(ftp_client_proto_test_DEPENDENCIES)
	@rm -f ftp_client_proto_test
	$(CXXLINK) $(ftp_client_proto_test_LDFLAGS) $(ftp_client_proto_test_OBJECTS) $(ftp_client_proto_test_LDADD) $(LIBS)

nbbio_test: $(nbbio_test_OBJECTS) $(nbbio_test_DEPENDENCIES)
	@rm -f nbbio_test
	$(CXXLINK) $(nbbio_test_LDFLAGS) $(nbbio_test_OBJECTS) $(nbbio_test_LDADD) $(LIBS)

Poller_test: $(Poller_test_OBJECTS) $(Poller_test_DEPENDENCIES)
	@rm -f Poller_test
	$(CXXLINK) $(Poller_test_LDFLAGS) $(Poller_test_OBJECTS) $(Poller_test_LDADD) $(LIBS)

Sked_test: $(Sked_test_OBJECTS) $(Sked_test_DEPENDENCIES)
	@rm -f Sked_test
	$(CXXLINK) $(Sked_test_LDFLAGS) $(Sked_test_OBJECTS) $(Sked_test_LDADD) $(LIBS)

robouser_test: $(robouser_test_OBJECTS) $(robouser_test_DEPENDENCIES)
	@rm -f robouser_test
	$(CXXLINK) $(robouser_test_LDFLAGS) $(robouser_test_OBJECTS) $(robouser_test_LDADD) $(LIBS)

ftp_client_pipe_test: $(ftp_client_pipe_test_OBJECTS) $(ftp_client_pipe_test_DEPENDENCIES)
	@rm -f ftp_client_pipe_test
	$(CXXLINK) $(ftp_client_pipe_test_LDFLAGS) $(ftp_client_pipe_test_OBJECTS) $(ftp_client_pipe_test_LDADD) $(LIBS)

dklimits: $(dklimits_OBJECTS) $(dklimits_DEPENDENCIES)
	@rm -f dklimits
	$(LINK) $(dklimits_LDFLAGS) $(dklimits_OBJECTS) $(dklimits_LDADD) $(LIBS)

Poller_bench: $(Poller_bench_OBJECTS) $(Poller_bench_DEPENDENCIES)
	@rm -f Poller_bench
	$(CXXLINK) $(Poller_bench_LDFLAGS) $(Poller_bench_OBJECTS) $(Poller_bench_LDADD) $(LIBS)

profile: $(profile_OBJECTS) $(profile_DEPENDENCIES)
	@rm -f profile
	$(LINK) $(profile_LDFLAGS) $(profile_OBJECTS) $(profile_LDADD) $(LIBS)
.cc.o:
	$(CXXCOMPILE) -c $<

DVIPS = dvips

.texi.info:
	@cd $(srcdir) && rm -f $@ $@-[0-9] $@-[0-9][0-9]
	cd $(srcdir) \
	  && $(MAKEINFO) `echo $< | sed 's,.*/,,'`

.texi.dvi:
	TEXINPUTS=$(top_srcdir)/config/texinfo.tex:$$TEXINPUTS \
	  MAKEINFO='$(MAKEINFO) -I $(srcdir)' $(TEXI2DVI) $<

.texi:
	@cd $(srcdir) && rm -f $@ $@-[0-9] $@-[0-9][0-9]
	cd $(srcdir) \
	  && $(MAKEINFO) `echo $< | sed 's,.*/,,'`

.texinfo.info:
	@cd $(srcdir) && rm -f $@ $@-[0-9] $@-[0-9][0-9]
	cd $(srcdir) \
	  && $(MAKEINFO) `echo $< | sed 's,.*/,,'`

.texinfo:
	@cd $(srcdir) && rm -f $@ $@-[0-9] $@-[0-9][0-9]
	cd $(srcdir) \
	  && $(MAKEINFO) `echo $< | sed 's,.*/,,'`

.texinfo.dvi:
	TEXINPUTS=$(top_srcdir)/config/texinfo.tex:$$TEXINPUTS \
	  MAKEINFO='$(MAKEINFO) -I $(srcdir)' $(TEXI2DVI) $<

.txi.info:
	@cd $(srcdir) && rm -f $@ $@-[0-9] $@-[0-9][0-9]
	cd $(srcdir) \
	  && $(MAKEINFO) `echo $< | sed 's,.*/,,'`

.txi.dvi:
	TEXINPUTS=$(top_srcdir)/config/texinfo.tex:$$TEXINPUTS \
	  MAKEINFO='$(MAKEINFO) -I $(srcdir)' $(TEXI2DVI) $<

.txi:
	@cd $(srcdir) && rm -f $@ $@-[0-9] $@-[0-9][0-9]
	cd $(srcdir) \
	  && $(MAKEINFO) `echo $< | sed 's,.*/,,'`
.dvi.ps:
	$(DVIPS) $< -o $@

install-info-am: $(INFO_DEPS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(infodir)
	@list='$(INFO_DEPS)'; \
	for file in $$list; do \
	  d=$(srcdir); \
	  for ifile in `cd $$d && echo $$file $$file-[0-9] $$file-[0-9][0-9]`; do \
	    if test -f $$d/$$ifile; then \
	      echo " $(INSTALL_DATA) $$d/$$ifile $(DESTDIR)$(infodir)/$$ifile"; \
	      $(INSTALL_DATA) $$d/$$ifile $(DESTDIR)$(infodir)/$$ifile; \
	    else : ; fi; \
	  done; \
	done
	@$(POST_INSTALL)
	@if $(SHELL) -c 'install-info --version | sed 1q | fgrep -s -v -i debian' >/dev/null 2>&1; then \
	  list='$(INFO_DEPS)'; \
	  for file in $$list; do \
	    echo " install-info --info-dir=$(DESTDIR)$(infodir) $(DESTDIR)$(infodir)/$$file";\
	    install-info --info-dir=$(DESTDIR)$(infodir) $(DESTDIR)$(infodir)/$$file || :;\
	  done; \
	else : ; fi

uninstall-info:
	$(PRE_UNINSTALL)
	@if $(SHELL) -c 'install-info --version | sed 1q | fgrep -s -v -i debian' >/dev/null 2>&1; then \
	  ii=yes; \
	else ii=; fi; \
	list='$(INFO_DEPS)'; \
	for file in $$list; do \
	  test -z "$$ii" \
	    || install-info --info-dir=$(DESTDIR)$(infodir) --remove $$file; \
	done
	@$(NORMAL_UNINSTALL)
	list='$(INFO_DEPS)'; \
	for file in $$list; do \
	  (cd $(DESTDIR)$(infodir) && rm -f $$file $$file-[0-9] $$file-[0-9][0-9]); \
	done

dist-info: $(INFO_DEPS)
	list='$(INFO_DEPS)'; \
	for base in $$list; do \
	  d=$(srcdir); \
	  for file in `cd $$d && eval echo $$base*`; do \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file; \
	  done; \
	done

mostlyclean-aminfo:
	-rm -f

clean-aminfo:

distclean-aminfo:

maintainer-clean-aminfo:
	cd $(srcdir) && for i in $(INFO_DEPS); do \
	  rm -f $$i; \
	  if test "`echo $$i-[0-9]*`" != "$$i-[0-9]*"; then \
	    rm -f $$i-[0-9]*; \
	  fi; \
	done

install-pkgincludeHEADERS: $(pkginclude_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(pkgincludedir)
	@list='$(pkginclude_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d= ; else d="$(srcdir)/"; fi; \
	  echo " $(INSTALL_DATA) $$d$$p $(DESTDIR)$(pkgincludedir)/$$p"; \
	  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(pkgincludedir)/$$p; \
	done

uninstall-pkgincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	list='$(pkginclude_HEADERS)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(pkgincludedir)/$$p; \
	done

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	-rm -rf $(distdir)
	GZIP=$(GZIP_ENV) $(TAR) zxf $(distdir).tar.gz
	mkdir $(distdir)/=build
	mkdir $(distdir)/=inst
	dc_install_base=`cd $(distdir)/=inst && pwd`; \
	cd $(distdir)/=build \
	  && ../configure --srcdir=.. --prefix=$$dc_install_base \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) dist
	-rm -rf $(distdir)
	@banner="$(distdir).tar.gz is ready for distribution"; \
	dashes=`echo "$$banner" | sed s/./=/g`; \
	echo "$$dashes"; \
	echo "$$banner"; \
	echo "$$dashes"
dist: distdir
	-chmod -R a+r $(distdir)
	GZIP=$(GZIP_ENV) $(TAR) chozf $(distdir).tar.gz $(distdir)
	-rm -rf $(distdir)
dist-all: distdir
	-chmod -R a+r $(distdir)
	GZIP=$(GZIP_ENV) $(TAR) chozf $(distdir).tar.gz $(distdir)
	-rm -rf $(distdir)
distdir: $(DISTFILES)
	-rm -rf $(distdir)
	mkdir $(distdir)
	-chmod 777 $(distdir)
	$(mkinstalldirs) $(distdir)/config
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done
	$(MAKE) $(AM_MAKEFLAGS) top_distdir="$(top_distdir)" distdir="$(distdir)" dist-info
bench.o: bench.cc CHECK.h getifaddrs.h robouser.h eclock.h \
	ftp_client_pipe.h nbbio.h ftp_client_proto.h Poller.h Sked.h \
	Platoon.h dprint.h Poller_poll.h Poller_devpoll.h \
	Poller_select.h Poller_kqueue.h Poller_sigio.h Poller_sigfd.h
CHECK.o: CHECK.cc CHECK.h dprint.h
dklimits.o: dklimits.c
dprint.o: dprint.cc dprint.h
eclock.o: eclock.cc eclock.h
ftp_client_pipe.o: ftp_client_pipe.cc dprint.h ftp_client_pipe.h \
	eclock.h nbbio.h ftp_client_proto.h Poller.h Sked.h
ftp_client_pipe_test.o: ftp_client_pipe_test.cc dprint.h \
	ftp_client_pipe.h eclock.h nbbio.h ftp_client_proto.h Poller.h \
	Sked.h Poller_poll.h
ftp_client_proto.o: ftp_client_proto.cc dprint.h ftp_client_proto.h
ftp_client_proto_test.o: ftp_client_proto_test.cc ftp_client_proto.h
getifaddrs.o: getifaddrs.c getifaddrs.h
nbbio.o: nbbio.cc nbbio.h
nbbio_test.o: nbbio_test.cc nbbio.h
Platoon.o: Platoon.cc Platoon.h robouser.h eclock.h ftp_client_pipe.h \
	nbbio.h ftp_client_proto.h Poller.h Sked.h dprint.h
Poller.o: Poller.cc dprint.h Poller.h
Poller_bench.o: Poller_bench.cc Poller_devpoll.h Poller_kqueue.h \
	Poller_poll.h Poller.h Poller_select.h Poller_sigio.h dprint.h \
	eclock.h CHECK.h
Poller_devpoll.o: Poller_devpoll.cc
Poller_kqueue.o: Poller_kqueue.cc
Poller_poll.o: Poller_poll.cc dprint.h Poller_poll.h Poller.h
Poller_select.o: Poller_select.cc dprint.h Poller_select.h Poller.h
Poller_sigfd.o: Poller_sigfd.cc
Poller_sigio.o: Poller_sigio.cc dprint.h Poller_sigio.h Poller.h \
	Poller_poll.h eclock.h
Poller_test.o: Poller_test.cc Poller_poll.h Poller.h Poller_select.h \
	Poller_kqueue.h Poller_devpoll.h Poller_sigio.h dprint.h \
	Poller_sigfd.h CHECK.h
profile.o: profile.c
robouser.o: robouser.cc dprint.h robouser.h eclock.h ftp_client_pipe.h \
	nbbio.h ftp_client_proto.h Poller.h Sked.h Platoon.h
robouser_test.o: robouser_test.cc CHECK.h dprint.h robouser.h eclock.h \
	ftp_client_pipe.h nbbio.h ftp_client_proto.h Poller.h Sked.h \
	Poller_poll.h Platoon.h
Sked.o: Sked.cc Sked.h eclock.h dprint.h
Sked_test.o: Sked_test.cc Sked.h eclock.h dprint.h

check-TESTS: $(TESTS)
	@failed=0; all=0; \
	srcdir=$(srcdir); export srcdir; \
	for tst in $(TESTS); do \
	  if test -f $$tst; then dir=.; \
	  else dir="$(srcdir)"; fi; \
	  if $(TESTS_ENVIRONMENT) $$dir/$$tst; then \
	    all=`expr $$all + 1`; \
	    echo "PASS: $$tst"; \
	  elif test $$? -ne 77; then \
	    all=`expr $$all + 1`; \
	    failed=`expr $$failed + 1`; \
	    echo "FAIL: $$tst"; \
	  fi; \
	done; \
	if test "$$failed" -eq 0; then \
	  banner="All $$all tests passed"; \
	else \
	  banner="$$failed of $$all tests failed"; \
	fi; \
	dashes=`echo "$$banner" | sed s/./=/g`; \
	echo "$$dashes"; \
	echo "$$banner"; \
	echo "$$dashes"; \
	test "$$failed" -eq 0
info-am: $(INFO_DEPS)
info: info-am
dvi-am: $(DVIS)
dvi: dvi-am
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
installcheck-am:
installcheck: installcheck-am
install-exec-am: install-libLIBRARIES install-binPROGRAMS
install-exec: install-exec-am

install-data-am: install-info-am install-pkgincludeHEADERS
install-data: install-data-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-am
uninstall-am: uninstall-libLIBRARIES uninstall-binPROGRAMS \
		uninstall-info uninstall-pkgincludeHEADERS
uninstall: uninstall-am
all-am: Makefile $(INFO_DEPS) $(LIBRARIES) $(PROGRAMS) $(HEADERS)
all-redirect: all-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs:
	$(mkinstalldirs)  $(DESTDIR)$(libdir) $(DESTDIR)$(bindir) \
		$(DESTDIR)$(infodir) $(DESTDIR)$(pkgincludedir)


mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*

maintainer-clean-generic:
mostlyclean-am:  mostlyclean-libLIBRARIES mostlyclean-compile \
		mostlyclean-binPROGRAMS mostlyclean-noinstPROGRAMS \
		mostlyclean-aminfo mostlyclean-tags mostlyclean-generic

mostlyclean: mostlyclean-am

clean-am:  clean-libLIBRARIES clean-compile clean-binPROGRAMS \
		clean-noinstPROGRAMS clean-aminfo clean-tags \
		clean-generic mostlyclean-am

clean: clean-am

distclean-am:  distclean-libLIBRARIES distclean-compile \
		distclean-binPROGRAMS distclean-noinstPROGRAMS \
		distclean-aminfo distclean-tags distclean-generic \
		clean-am

distclean: distclean-am
	-rm -f config.status

maintainer-clean-am:  maintainer-clean-libLIBRARIES \
		maintainer-clean-compile maintainer-clean-binPROGRAMS \
		maintainer-clean-noinstPROGRAMS maintainer-clean-aminfo \
		maintainer-clean-tags maintainer-clean-generic \
		distclean-am
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-am
	-rm -f config.status

.PHONY: mostlyclean-libLIBRARIES distclean-libLIBRARIES \
clean-libLIBRARIES maintainer-clean-libLIBRARIES uninstall-libLIBRARIES \
install-libLIBRARIES mostlyclean-compile distclean-compile \
clean-compile maintainer-clean-compile mostlyclean-binPROGRAMS \
distclean-binPROGRAMS clean-binPROGRAMS maintainer-clean-binPROGRAMS \
uninstall-binPROGRAMS install-binPROGRAMS mostlyclean-noinstPROGRAMS \
distclean-noinstPROGRAMS clean-noinstPROGRAMS \
maintainer-clean-noinstPROGRAMS install-info-am uninstall-info \
mostlyclean-aminfo distclean-aminfo clean-aminfo \
maintainer-clean-aminfo uninstall-pkgincludeHEADERS \
install-pkgincludeHEADERS tags mostlyclean-tags distclean-tags \
clean-tags maintainer-clean-tags distdir check-TESTS info-am info \
dvi-am dvi check check-am installcheck-am installcheck install-exec-am \
install-exec install-data-am install-data install-am install \
uninstall-am uninstall all-redirect all-am all installdirs \
mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean


#------- start of corba.  Not fully autoconfisticated yet ---------

CorbaPlatoon_srv.cc: CorbaPlatoon.idl
	@IDLCXX@ @IDLFLAGS@ CorbaPlatoon.idl
#   Copy to get uniform filenames for generated files
	cp CorbaPlatoon@IDL_SRV_CPP_SUFFIX@ CorbaPlatoon_srv.cc
	cp CorbaPlatoon@IDL_SRV_H_SUFFIX@   CorbaPlatoon_srv.hh
	cp CorbaPlatoon@IDL_CLN_CPP_SUFFIX@ CorbaPlatoon_cln.cc
	cp CorbaPlatoon@IDL_CLN_H_SUFFIX@   CorbaPlatoon_cln.hh

CorbaPlatoon_srv.o: CorbaPlatoon_srv.cc
	$(CXX) -c $(CXXFLAGS) @IDLCXXFLAGS@ @CPPFLAGS@ $(LIBS) -o CorbaPlatoon_srv.o CorbaPlatoon_srv.cc

# fixme: should not use CHECK
CorbaPlatoon_impl: CorbaPlatoon_impl.cc CorbaPlatoon_srv.o Platoon.o eclock.o robouser.o Sked.o ftp_client_pipe.o ftp_client_proto.o nbbio.o CHECK.o libPoller.a getifaddrs.o dprint.o
	$(CXX) -c $(CXXFLAGS) @IDLCXXFLAGS@ @CPPFLAGS@ -o CorbaPlatoon_impl.o CorbaPlatoon_impl.cc
	$(CXX) $(CXXFLAGS) $(LIBS) @ORB_LIBS@ -o CorbaPlatoon_impl CorbaPlatoon_impl.o CorbaPlatoon_srv.o Platoon.o eclock.o robouser.o Sked.o ftp_client_pipe.o ftp_client_proto.o nbbio.o CHECK.o libPoller.a getifaddrs.o dprint.o

CorbaPlatoon_test: CorbaPlatoon_test.cc CorbaPlatoon_srv.o
	$(CXX) -c $(CXXFLAGS) @IDLCXXFLAGS@ @CPPFLAGS@ -o CorbaPlatoon_test.o CorbaPlatoon_test.cc
	$(CXX) $(CXXFLAGS) $(LIBS) @ORB_LIBS@ -o CorbaPlatoon_test CorbaPlatoon_test.o CorbaPlatoon_srv.o

corbaftpbench: corbaftpbench.cc CorbaPlatoon_srv.o eclock.o
	$(CXX) -c $(CXXFLAGS) $(DEFS) @IDLCXXFLAGS@ @CPPFLAGS@ -o corbaftpbench.o corbaftpbench.cc
	$(CXX) $(CXXFLAGS) $(LIBS) @ORB_LIBS@ -o corbaftpbench corbaftpbench.o CorbaPlatoon_srv.o eclock.o

clean:
	/bin/rm -f *.o CorbaPlatoon.hh CorbaPlatoon{_srv,Dyn_srv}.cc

#--------------------------------------------------------------------------
# Extract documentation from sources.

docs:
	-rm -rf doc
	-mkdir doc
	doc++ -d doc *.h
	perl -p -i.bak -e "s/--------*//g" doc/*.html  

#--------------------------------------------------------------------------
# Generate data files.

data:
	dd if=/dev/zero of=x10k.dat bs=1k count=10
	dd if=/dev/zero of=x100k.dat bs=1k count=100
	dd if=/dev/zero of=x1000k.dat bs=1k count=1000

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
